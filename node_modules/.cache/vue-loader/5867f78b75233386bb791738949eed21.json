{"remainingRequest":"/Users/cagdaskaratas/Desktop/Kize/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/cagdaskaratas/Desktop/Kize/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/cagdaskaratas/Desktop/Kize/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/cagdaskaratas/Desktop/Kize/src/application/Index.vue?vue&type=template&id=4f861b2a&","dependencies":[{"path":"/Users/cagdaskaratas/Desktop/Kize/src/application/Index.vue","mtime":1602227529884},{"path":"/Users/cagdaskaratas/Desktop/Kize/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cagdaskaratas/Desktop/Kize/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/cagdaskaratas/Desktop/Kize/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cagdaskaratas/Desktop/Kize/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}